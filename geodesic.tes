//  Geodesic Tesselation Evalution Shader, happens after TCS shader

#version 420

//  Equilateral triangles in (CW order)
layout(triangles, equal_spacing, cw) in;
layout(binding = 0) uniform sampler2D terrainTex;
//  Modelview and projection matrices
uniform mat4 Projection;
uniform mat4 Modelview;

//  Coordinates in and out
in  vec3 tcPosition[];  //vertices as interpolated by tcs shader: edges have been split, new vertices stored here
out vec3 tePosition;
out vec3 tePatchDistance;
out vec2 teTexCoord;
out vec3 teObjVert;
out vec4 up;

void main()
{
   //  Distance to edge of patch for interpolation
   tePatchDistance = gl_TessCoord; //My position in the primitive in barycentric coords
   //  Interpolate to vertex
   vec3 p0 = gl_TessCoord.x * tcPosition[0]; //Scale the normalized vertex position by the barycentric distance to the patch edge
   vec3 p1 = gl_TessCoord.y * tcPosition[1];
   vec3 p2 = gl_TessCoord.z * tcPosition[2];

   //p0.y += texture2D(terrainTex, vec2(p0.x, p0.z)).x;
   //p1.y += texture2D(terrainTex, vec2(p1.x, p1.z)).x;
   //p2.y += texture2D(terrainTex, vec2(p2.x, p2.z)).x;
   tePosition = p0 + p1 + p2;  //The normalize() was to make sure the new points were on the sphere, I don't need it
   teTexCoord = (vec2(p0.x, p0.z) + vec2(p1.x, p1.z) + vec2(p2.x, p2.z) + 5.0)/10.0;
   tePosition.y += texture2D(terrainTex, teTexCoord).x*6 - 2.0;
   up = vec4(0.0,1.0,0.0,1.0);
   //  Project vertex
   teObjVert = vec3(tePosition.x, tePosition.y, tePosition.z);
   gl_Position = Projection * Modelview * vec4(tePosition, 1);  //pass the new, transformed, vertex to the geometry shader
}
