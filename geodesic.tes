//  Geodesic Tesselation Evalution Shader, happens after TCS shader

#version 400

//  Equilateral triangles in (CW order)
layout(triangles, equal_spacing, cw) in;
//  Modelview and projection matrices
uniform mat4 Projection;
uniform mat4 Modelview;
//  Coordinates in and out
in  vec3 tcPosition[];  //vertices as interpolated by tcs shader: edges have been split, new vertices stored here
out vec3 tePosition;
out vec3 tePatchDistance;

void main()
{
   //  Distance to edge of patch for interpolation
   tePatchDistance = gl_TessCoord; //Barycentric coordinates of each vertex
   //  Interpolate to vertex
   vec3 p0 = gl_TessCoord.x * tcPosition[0]; //Scale the normalized vertex position by the barycentric distance to the patch edge
   vec3 p1 = gl_TessCoord.y * tcPosition[1];
   vec3 p2 = gl_TessCoord.z * tcPosition[2];
   //  Lengthen to unit radius
   tePosition = normalize(p0 + p1 + p2);  //???
   //  Project vertex
   gl_Position = Projection * Modelview * vec4(tePosition, 1);  //pass the new, transformed, vertex to the geometry shader
}
